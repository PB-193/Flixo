#!/bin/bash

# Flixo テストレポート生成スクリプト

set -e

# カラー定義
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

print_header() {
    echo -e "${PURPLE}"
    echo "📊 =========================================="
    echo "   Flixo テストレポート生成"
    echo "==========================================${NC}"
    echo ""
}

print_section() {
    echo -e "${CYAN}🔧 $1${NC}"
    echo ""
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

# JSONから情報を抽出する関数
extract_test_stats() {
    local json_file="$1"
    
    if [ ! -f "$json_file" ]; then
        print_error "テスト結果ファイルが見つかりません: $json_file"
        return 1
    fi
    
    # Node.jsを使ってJSONを解析
    node -e "
        const fs = require('fs');
        const data = JSON.parse(fs.readFileSync('$json_file', 'utf8'));
        const stats = data.stats || {};
        console.log('Total:', stats.expected || 0);
        console.log('Passed:', stats.passed || 0);
        console.log('Failed:', stats.failed || 0);
        console.log('Skipped:', stats.skipped || 0);
        console.log('Duration:', Math.round((stats.duration || 0) / 1000) + 's');
    "
}

# スクリーンショット統計の生成
generate_screenshot_stats() {
    local test_results_dir="test-results"
    
    if [ ! -d "$test_results_dir" ]; then
        print_error "テスト結果ディレクトリが見つかりません"
        return 1
    fi
    
    local png_count=$(find "$test_results_dir" -name "*.png" 2>/dev/null | wc -l)
    local jpg_count=$(find "$test_results_dir" -name "*.jpg" 2>/dev/null | wc -l)
    local total_screenshots=$((png_count + jpg_count))
    
    echo "スクリーンショット統計:"
    echo "  PNG: $png_count 個"
    echo "  JPG: $jpg_count 個"
    echo "  合計: $total_screenshots 個"
}

# テストレポートの生成
generate_markdown_report() {
    local output_file="TEST_EXECUTION_REPORT.md"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    print_section "Markdownレポートを生成中..."
    
    cat > "$output_file" << EOF
# 📊 Flixo テスト実行レポート

**生成日時**: $timestamp

## 🎯 テスト実行サマリー

EOF

    # JSON結果があれば統計を追加
    if [ -f "test-results/results.json" ]; then
        echo "### テスト統計" >> "$output_file"
        echo '```' >> "$output_file"
        extract_test_stats "test-results/results.json" >> "$output_file"
        echo '```' >> "$output_file"
        echo "" >> "$output_file"
    fi
    
    # スクリーンショット統計
    echo "### スクリーンショット統計" >> "$output_file"
    echo '```' >> "$output_file"
    generate_screenshot_stats >> "$output_file"
    echo '```' >> "$output_file"
    echo "" >> "$output_file"
    
    # テストファイル一覧
    echo "### 実行されたテストファイル" >> "$output_file"
    echo "" >> "$output_file"
    for test_file in tests/*.spec.ts; do
        if [ -f "$test_file" ]; then
            echo "- \`$(basename "$test_file")\`" >> "$output_file"
        fi
    done
    echo "" >> "$output_file"
    
    # 生成されたスクリーンショット
    echo "### 生成されたスクリーンショット" >> "$output_file"
    echo "" >> "$output_file"
    
    # 主要なスクリーンショットを表示
    local key_screenshots=(
        "main-page-full.png"
        "desktop-1920x1080.png"
        "mobile-375x667.png"
        "video-post-form.png"
        "card-hover-after.png"
    )
    
    for screenshot in "${key_screenshots[@]}"; do
        if [ -f "test-results/$screenshot" ]; then
            echo "#### $(basename "$screenshot" .png | tr '-' ' ' | sed 's/\b\w/\U&/g')" >> "$output_file"
            echo "![$(basename "$screenshot")]](test-results/$screenshot)" >> "$output_file"
            echo "" >> "$output_file"
        fi
    done
    
    # フッター
    cat >> "$output_file" << EOF

## 🔗 関連ファイル

- [HTML レポート](playwright-report/index.html)
- [JSON 結果](test-results/results.json)
- [テスト結果ディレクトリ](test-results/)

---

**Generated by Flixo Test Suite** ✨
EOF
    
    print_success "Markdownレポートを生成しました: $output_file"
}

# HTMLサマリーの生成
generate_html_summary() {
    local output_file="test-summary.html"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    print_section "HTMLサマリーを生成中..."
    
    cat > "$output_file" << 'EOF'
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flixo テストサマリー</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
            background: linear-gradient(135deg, #3B82F6, #8B5CF6);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }
        .stat-card {
            background: linear-gradient(135deg, #f6f9fc, #ffffff);
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.05);
            text-align: center;
            border: 1px solid #e2e8f0;
        }
        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            color: #3B82F6;
        }
        .stat-label {
            color: #64748b;
            font-size: 0.9rem;
            margin-top: 5px;
        }
        .screenshots {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }
        .screenshot-card {
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0,0,0,0.05);
            border: 1px solid #e2e8f0;
        }
        .screenshot-card img {
            width: 100%;
            height: 200px;
            object-fit: cover;
        }
        .screenshot-card h3 {
            padding: 15px;
            margin: 0;
            background: #f8fafc;
            color: #374151;
            font-size: 1rem;
        }
        .button {
            display: inline-block;
            background: linear-gradient(135deg, #3B82F6, #8B5CF6);
            color: white;
            padding: 12px 24px;
            border-radius: 25px;
            text-decoration: none;
            font-weight: 500;
            margin: 10px;
            transition: transform 0.2s;
        }
        .button:hover {
            transform: translateY(-2px);
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🎬 Flixo テストサマリー</h1>
            <p>Generated on: TIMESTAMP_PLACEHOLDER</p>
        </div>
        
        <div class="stats">
            <div class="stat-card">
                <div class="stat-number" id="total-tests">-</div>
                <div class="stat-label">総テスト数</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="passed-tests">-</div>
                <div class="stat-label">成功</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="failed-tests">-</div>
                <div class="stat-label">失敗</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="screenshots">-</div>
                <div class="stat-label">スクリーンショット</div>
            </div>
        </div>
        
        <div style="text-align: center; margin: 30px 0;">
            <a href="playwright-report/index.html" class="button">📊 詳細レポートを見る</a>
            <a href="test-results/" class="button">📁 テスト結果を見る</a>
        </div>
        
        <h2>📸 主要なスクリーンショット</h2>
        <div class="screenshots" id="screenshots-container">
            <!-- スクリーンショットはJavaScriptで動的に追加 -->
        </div>
    </div>
    
    <script>
        // 統計データの更新
        // この部分は実際の実行時に動的に生成されます
    </script>
</body>
</html>
EOF

    # タイムスタンプを置換
    sed -i '' "s/TIMESTAMP_PLACEHOLDER/$timestamp/g" "$output_file"
    
    print_success "HTMLサマリーを生成しました: $output_file"
}

# メイン処理
main() {
    print_header
    
    # テスト結果ディレクトリの確認
    if [ ! -d "test-results" ]; then
        print_error "test-results ディレクトリが見つかりません"
        print_info "先にテストを実行してください: ./scripts/test.sh"
        exit 1
    fi
    
    # レポート生成
    generate_markdown_report
    generate_html_summary
    
    print_section "レポート生成完了"
    print_success "生成されたファイル:"
    print_info "  - TEST_EXECUTION_REPORT.md (Markdown レポート)"
    print_info "  - test-summary.html (HTML サマリー)"
    print_info "  - playwright-report/index.html (詳細 HTML レポート)"
    
    echo ""
    print_info "HTMLサマリーを開くには: open test-summary.html"
}

# スクリプト実行
main "$@"